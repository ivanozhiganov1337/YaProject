import datetime

bot = telebot.TeleBot('7095243446:AAH5r-oRjJFwj6EfCwcf-V3GJFsLiAVApM8')
hght = None
weight = None
yo = None
alpha = None


@bot.message_handler(commands=['start', '–ø—Ä–∏–≤–µ—Ç'])
def m_start(message):
    conn = sqlite3.connect('kallorii.sql')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (user_id varchar(50) primary key, norm_k varchar(6))')
    conn.commit()
    cur.close()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton('–°—Ç–∞—Ä—Ç!', callback_data='start_d')
    markup.row(but1)

    if message.from_user.first_name and message.from_user.last_name:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <em>{message.from_user.first_name} {message.from_user.last_name}</em>, —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–µ–≥–æ –±–æ—Ç–∞', parse_mode='html', reply_markup=markup)
    elif message.from_user.first_name:
        bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, <em>{message.from_user.first_name}</em>, —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–µ–≥–æ –±–æ—Ç–∞', parse_mode='html', reply_markup=markup)
    elif message.from_user.last_name:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <em>{message.from_user.last_name}</em>, —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–µ–≥–æ –±–æ—Ç–∞', parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–µ–≥–æ –±–æ—Ç–∞', reply_markup=markup)

@bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å'])
def m_help(message):
    markup = types.InlineKeyboardMarkup()
    but_inf = types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='inf_n_k')
    but_cloncluse = types.InlineKeyboardButton('–í–Ω–µ—Å—Ç–∏ –ø–æ—Ç–æ—Ä–µ–±–ª–µ–Ω–∏–µ/—Ç—Ä–∞—Ç—ã', callback_data='concluse')
    markup.row(but_inf, but_cloncluse)
    bot.send_message(message.chat.id, '<b><em>–≠—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–æ–µ–º—É –ø—Ä–æ—ç–∫—Ç—É</em></b>', parse_mode='html', reply_markup=markup)

def concluse(massage):
    markup = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton('–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', callback_data='potrebl')
    but_2 = types.InlineKeyboardButton('–¢—Ä–∞—Ç—ã', callback_data='trati')
    markup.row(but_1, but_2)

    bot.send_message(massage.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?", reply_markup=markup)

def inf_n_k(massage):
    conn = sqlite3.connect('kallorii.sql')
    cur = conn.cursor()
    cur.execute(f"""SELECT * FROM users WHERE user_id = '%s'""" % massage.chat.id)
    pimp = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    pimp1 = pimp[0][-1].split(';')

    markup = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help')
    markup.row(but1)

    bot.send_message(massage.chat.id, f'–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {pimp1[0]}', reply_markup=markup)

def m_concluse(massage, alp):
    global alpha
    bot.send_message(massage.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á—Å–µ—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–πüëÄ')
    alpha = alp
    bot.register_next_step_handler(massage, refcluse)

def refcluse(massage):
    global alpha

    n_k = massage.text.strip()

    a = datetime.datetime.today()
    a = str(a)
    a = a[:10]
    aaa = a.split('-')
    a = ''
    for i in aaa:
        a += i

    conn = sqlite3.connect('kallorii.sql')
    cur = conn.cursor()
    cur.execute(f"""pragma table_info(users)""")
    b = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    check = 0
    for i in b:
        if i[1] == a:
            check += 1

    if check == 0:
        conn = sqlite3.connect('kallorii.sql')
        cur = conn.cursor()
        cur.execute(f"""ALTER TABLE users ADD COLUMN '%s' VARCHAR""" % a)
        conn.commit()
        cur.close()
        conn.close()

        conn = sqlite3.connect('kallorii.sql')
        cur = conn.cursor()
        cur.execute(f"""SELECT user_id From users""")
        user_id = cur.fetchall()
        conn.commit()
        cur.close()
        conn.close()

        conn = sqlite3.connect('kallorii.sql')
        cur = conn.cursor()
        cur.execute(f"""SELECT norm_k From users""")
        normika = cur.fetchall()
        conn.commit()
        cur.close()
        conn.close()
        user_id = user_id[::-1]

        for i in user_id:
            brenk = i[0]
            itch = str((normika[user_id.index(i)][0][:-2])) + ';' + '0' + ';' + '0'

            conn = sqlite3.connect('kallorii.sql')
            cur = conn.cursor()
            cur.execute(f"""UPDATE users SET '%s' = '%s' WHERE user_id = '%s'""" % (a, itch, brenk))
            conn.commit()
            cur.close()
            conn.close()

    conn = sqlite3.connect('kallorii.sql')
    cur = conn.cursor()
    cur.execute(f"""SELECT * FROM users WHERE user_id = '%s'""" % massage.chat.id)
    pimp = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    pimp1 = pimp[0][-1].split(';')

    if alpha == 1:

        asdfg = int(pimp1[0]) + int(n_k)
        asdfg1 = int(n_k)
        pimp1[0] = asdfg
        pimp1[1] = asdfg1
        pimp2 = str(pimp1[0]) + ';' + str(pimp1[1]) + ';' + str(pimp1[2])

        conn = sqlite3.connect('kallorii.sql')
        cur = conn.cursor()
        cur.execute(f"""UPDATE users SET '%s' = '%s' WHERE user_id = '%s'""" % (a, pimp2, massage.chat.id))
        conn.commit()
        cur.close()
        conn.close()
    else:
        asdfg = int(pimp1[0]) - int(n_k)
        asdfg1 = int(n_k)
        pimp1[0] = asdfg
        pimp1[2] = asdfg1
        pimp2 = str(pimp1[0]) + ';' + str(pimp1[1]) + ';' + str(pimp1[2])

        conn = sqlite3.connect('kallorii.sql')
        cur = conn.cursor()
        cur.execute(f"""UPDATE users SET '%s' = '%s' WHERE user_id = '%s'""" % (a, pimp2, massage.chat.id))
        conn.commit()
        cur.close()
        conn.close()

    conn = sqlite3.connect('kallorii.sql')
    cur = conn.cursor()
    cur.execute(f"""SELECT * FROM users WHERE user_id = '%s'""" % massage.chat.id)
    pimp = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()

    pimp1 = pimp[0][-1].split(';')

    markup = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help')
    markup.row(but1)

    bot.send_message(massage.chat.id,f'–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {pimp1[0]}', reply_markup=markup)




@bot.message_handler(commands=['start_daires', '–Ω–∞—á–∞–ª–æ_–∑–∞–ø–∏—Å–∏'])
def m_start_d(message):
    bot.send_message(message.chat.id, '–í–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç(—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º)', parse_mode='html')
    bot.register_next_step_handler(message, yo1)


def yo1(message):
    global yo
    yo = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç(—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º)', parse_mode='html')
    bot.register_next_step_handler(message, height)


def height(message):
    global hght
    hght = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥(—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º)', parse_mode='html')
    bot.register_next_step_handler(message, weight1)


def weight1(message):
    global weight, hght, yo
    weight = message.text.strip()
    norm_k = (int(weight)) * 10 + ((6.25 * int(hght)) // 1) - (5 * int(yo)) + 655

    conn = sqlite3.connect('kallorii.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (user_id, norm_k) VALUES ('%s', '%s')" % (str(message.chat.id), str(norm_k)))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, f'–¢–≤–æ—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π(–±–µ–∑ —É—á—ë—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏): {norm_k} \n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–æ,'
                                      f' —Å–∫–æ–ª—å–∫–æ —Ç—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª –∫–∞–ª–æ—Ä–∏–π –∏ —Å–∫–æ–ª—å–∫–æ —Å–∂–µ–≥')
    m_help(message)

    weight, hght, yo = None, None, None


@bot.message_handler(commands=['yandex', '—è–Ω–¥–µ–∫—Å'])
def m_yandex_L(message):
    webbrowser.open('https://lms.yandex.ru')


@bot.callback_query_handler(func=lambda callback: True)
def callback_mes(callback):
    if callback.data == 'help':
        m_help(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == 'start_d':
        m_start_d(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == 'inf_n_k':
        inf_n_k(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == 'concluse':
        concluse(callback.message)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == 'trati':
        m_concluse(callback.message, 1)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == 'potrebl':
        m_concluse(callback.message, 2)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)


@bot.message_handler()
def com(messange):
    if messange.text.lower() in ['–ø—Ä–∏–≤–µ—Ç']:
        m_start(messange)
    if messange.text.lower() in ['–ø–æ–º–æ–≥–∏']:
        m_help(messange)
    if messange.text.lower() in ['yandex', '—è–Ω–¥–µ–∫—Å']:
        m_yandex_L(messange)
    if messange.text.lower() in ['–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ']:
        m_start_d(messange)


bot.infinity_polling()
